---

---

<button
  class="hamburger"
  aria-label="Toggle navigation menu"
  aria-expanded="false"
  aria-controls="nav-links"
  tabindex="0"
>
  <span class="line" aria-hidden="true"></span>
  <span class="line" aria-hidden="true"></span>
  <span class="line" aria-hidden="true"></span>
</button>

<style>
  .hamburger {
    cursor: pointer;
    padding: 0.5rem;
    background-color: transparent;
    border-radius: 0.5rem;
    transition: background-color 0.3s ease;
    border: none;
  }

  .hamburger:hover {
    background-color: rgba(0, 0, 0, 0.05);
  }

  .hamburger:focus {
    outline: 2px solid #14b8a6; /* teal-500 */
    outline-offset: 2px;
  }

  .hamburger:focus:not(:focus-visible) {
    outline: none;
  }

  .dark .hamburger:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }

  .hamburger .line {
    display: block;
    width: 1.25rem;
    height: 2px;
    margin-bottom: 5px;
    background-color: #4b5563; /* gray-600 */
    transition: all 0.3s ease-in-out;
  }

  .dark .hamburger .line {
    background-color: #d1d5db; /* gray-300 */
  }

  .hamburger .line:last-child {
    margin-bottom: 0;
  }

  /* Animation for the hamburger to X transformation */
  .expanded .hamburger .line:nth-child(1) {
    transform: translateY(7px) rotate(45deg);
  }

  .expanded .hamburger .line:nth-child(2) {
    opacity: 0;
  }

  .expanded .hamburger .line:nth-child(3) {
    transform: translateY(-7px) rotate(-45deg);
  }

  /* Hide on larger screens */
  @media (min-width: 768px) {
    .hamburger {
      display: none;
    }
  }
</style>

<script>
  // Enhanced toggle for hamburger menu with accessibility improvements
  document.addEventListener("astro:page-load", () => {
    const hamburger = document.querySelector(".hamburger");
    const navLinks = document.querySelector(".nav-links");
    const navWrapper = document.querySelector(".nav-wrapper");

    if (hamburger && navLinks && navWrapper) {
      // Toggle menu function with accessibility updates
      const toggleMenu = (show: boolean) => {
        hamburger.setAttribute("aria-expanded", show.toString());
        navLinks.classList.toggle("expanded", show);
        navWrapper.classList.toggle("expanded", show);

        if (show) {
          // When opening, remove transition class and focus the first menu item
          navLinks.classList.remove("was-expanded");

          // Make all menu items focusable when menu is open
          const menuItems = navLinks.querySelectorAll('[role="menuitem"]');
          menuItems.forEach((item) => {
            item.setAttribute("tabindex", "0");
          });

          // Focus on first menu item for keyboard users
          setTimeout(() => {
            const firstItem = menuItems[0];
            if (firstItem) (firstItem as HTMLElement).focus();
          }, 100);
        } else {
          navLinks.classList.add("was-expanded");

          // Make menu items not focusable when menu is closed
          const menuItems = navLinks.querySelectorAll('[role="menuitem"]');
          menuItems.forEach((item) => {
            item.setAttribute("tabindex", "-1");
          });

          // Return focus to hamburger button
          (hamburger as HTMLElement).focus();
        }
      };

      // Handle hamburger button click
      hamburger.addEventListener("click", () => {
        const isExpanded = hamburger.getAttribute("aria-expanded") === "true";
        toggleMenu(!isExpanded);
      });

      // Handle click outside of menu to close it
      document.addEventListener("click", (e: MouseEvent) => {
        const target = e.target as HTMLElement;
        const isMenuOpen = hamburger.getAttribute("aria-expanded") === "true";

        // Check if menu is open and the click was outside both the menu and hamburger button
        if (
          isMenuOpen &&
          !navLinks.contains(target) &&
          !hamburger.contains(target)
        ) {
          toggleMenu(false);
        }
      });

      // Handle keyboard accessibility
      document.addEventListener("keydown", (e) => {
        // Close menu with Escape key
        if (
          e.key === "Escape" &&
          hamburger.getAttribute("aria-expanded") === "true"
        ) {
          toggleMenu(false);
        }

        // Handle arrow key navigation within menu
        if (hamburger.getAttribute("aria-expanded") === "true") {
          const menuItems = Array.from(
            navLinks.querySelectorAll('[role="menuitem"]'),
          );
          const focusedElementIndex = menuItems.findIndex(
            (item) => document.activeElement === item,
          );

          // Arrow down/right: move to next item
          if (
            (e.key === "ArrowDown" || e.key === "ArrowRight") &&
            focusedElementIndex < menuItems.length - 1
          ) {
            e.preventDefault();
            (menuItems[focusedElementIndex + 1] as HTMLElement).focus();
          }

          // Arrow up/left: move to previous item
          if (
            (e.key === "ArrowUp" || e.key === "ArrowLeft") &&
            focusedElementIndex > 0
          ) {
            e.preventDefault();
            (menuItems[focusedElementIndex - 1] as HTMLElement).focus();
          }

          // Home: move to first item
          if (e.key === "Home") {
            e.preventDefault();
            (menuItems[0] as HTMLElement).focus();
          }

          // End: move to last item
          if (e.key === "End") {
            e.preventDefault();
            (menuItems[menuItems.length - 1] as HTMLElement).focus();
          }
        }
      });

      // Close menu on resize to desktop view
      let resizeTimer: ReturnType<typeof setTimeout> | undefined;
      window.addEventListener("resize", () => {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(() => {
          if (
            window.innerWidth >= 768 &&
            hamburger.getAttribute("aria-expanded") === "true"
          ) {
            toggleMenu(false);
          }
        }, 100);
      });

      // Initialize menu state
      navLinks.setAttribute("aria-hidden", "true");
    }
  });
</script>
