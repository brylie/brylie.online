---
import BaseLayout from "../../layouts/BaseLayout.astro";
import BlogPostListItem from "../../components/BlogPostListItem.astro";
import ProjectSummary from "../../components/ProjectSummary.astro";
import { getCollection } from "astro:content";
import { Icon } from "astro-icon/components";

export async function getStaticPaths() {
  const allPosts = await getCollection("blog");
  const allProjects = await getCollection("projects");

  // Get all tags from blog posts
  const postTags = [...new Set(allPosts.flatMap((post) => post.data.tags))];

  // Get all tags from projects
  const projectTags = [
    ...new Set(allProjects.flatMap((project) => project.data.tags || [])),
  ];

  // Get all technologies from projects
  const projectTechnologies = [
    ...new Set(
      allProjects.flatMap((project) => project.data.technologies || []),
    ),
  ];

  // Combine all unique tags and technologies
  const uniqueTags = [
    ...new Set([...postTags, ...projectTags, ...projectTechnologies]),
  ].sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));

  return uniqueTags.map((tag) => {
    // Filter posts that contain this tag
    const filteredPosts = allPosts
      .filter((post) => post.data.tags.includes(tag))
      .sort(
        (a, b) =>
          new Date(b.data.pubDate).valueOf() -
          new Date(a.data.pubDate).valueOf(),
      );

    // Filter projects that contain this tag in either tags or technologies
    const filteredProjects = allProjects
      .filter(
        (project) =>
          project.data.tags?.includes(tag) ||
          project.data.technologies?.includes(tag),
      )
      .sort(
        (a, b) =>
          new Date(b.data.datePublished).valueOf() -
          new Date(a.data.datePublished).valueOf(),
      );

    return {
      params: { tag },
      props: {
        posts: filteredPosts,
        projects: filteredProjects,
        tag,
      },
    };
  });
}

const { tag } = Astro.params;
const { posts, projects } = Astro.props;

// Check if we have posts or projects with this tag
const hasPosts = posts.length > 0;
const hasProjects = projects.length > 0;

// Determine if this tag is used as a technology in any project
const isTechnology = projects.some((project) =>
  project.data.technologies?.includes(tag),
);

// Help user understand what kind of tag this is
let tagDescription = "";
if (hasPosts && hasProjects) {
  if (isTechnology) {
    tagDescription = `"${tag}" appears in blog posts and as a tag or technology in projects.`;
  } else {
    tagDescription = `"${tag}" appears in both blog posts and projects.`;
  }
} else if (hasPosts) {
  tagDescription = `"${tag}" appears in blog posts.`;
} else if (hasProjects) {
  if (isTechnology) {
    tagDescription = `"${tag}" is a technology used in projects.`;
  } else {
    tagDescription = `"${tag}" is a tag used in projects.`;
  }
}

const pageTitle = `${tag}`;
---

<BaseLayout pageTitle={pageTitle}>
  <div class="max-w-4xl mx-auto">
    <!-- Tag Header Section -->
    <div
      class="bg-gradient-to-r from-teal-50 to-blue-50 dark:from-gray-800 dark:to-gray-900 rounded-xl p-6 mb-8"
    >
      <div class="flex items-center gap-3 mb-4">
        <span
          class="bg-teal-100 dark:bg-teal-900/70 text-teal-800 dark:text-teal-200 px-4 py-1.5 rounded-full text-sm font-medium"
        >
          #{tag}
        </span>

        {
          isTechnology && (
            <span class="bg-blue-100 dark:bg-blue-900/70 text-blue-800 dark:text-blue-200 px-3 py-1 rounded-full text-xs font-medium flex items-center gap-1">
              <Icon name="mdi:code-tags" class="w-3.5 h-3.5" /> Technology
            </span>
          )
        }
      </div>

      <p class="text-gray-700 dark:text-gray-300">{tagDescription}</p>

      <div class="flex flex-wrap gap-4 mt-6">
        <div
          class="bg-white/70 dark:bg-gray-800/70 py-2 px-4 rounded-lg flex items-center gap-2"
        >
          <Icon
            name="mdi:file-document"
            class="w-5 h-5 text-teal-600 dark:text-teal-400"
          />
          <span>
            <span class="font-bold text-gray-800 dark:text-gray-200"
              >{posts.length}</span
            >
            <span class="text-gray-600 dark:text-gray-400"
              >{posts.length === 1 ? "Post" : "Posts"}</span
            >
          </span>
        </div>

        <div
          class="bg-white/70 dark:bg-gray-800/70 py-2 px-4 rounded-lg flex items-center gap-2"
        >
          <Icon
            name="ic:folder-open"
            class="w-5 h-5 text-teal-600 dark:text-teal-400"
          />
          <span>
            <span class="font-bold text-gray-800 dark:text-gray-200"
              >{projects.length}</span
            >
            <span class="text-gray-600 dark:text-gray-400"
              >{projects.length === 1 ? "Project" : "Projects"}</span
            >
          </span>
        </div>
      </div>
    </div>

    <!-- Content Sections -->
    <div class="space-y-12">
      {/* Blog Posts Section */}
      {
        hasPosts && (
          <section aria-labelledby="blog-posts-heading">
            <div class="flex items-center justify-between mb-6">
              <h2
                id="blog-posts-heading"
                class="text-2xl font-bold text-gray-900 dark:text-white"
              >
                Blog Posts
              </h2>
              <a
                href="/blog/"
                class="text-teal-600 hover:text-teal-800 dark:text-teal-400 dark:hover:text-teal-300 text-sm font-medium flex items-center gap-1"
              >
                All Posts <Icon name="mdi:arrow-right" class="w-4 h-4" />
              </a>
            </div>

            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden">
              {posts.map((post, index) => (
                <div
                  class={`p-5 ${index !== posts.length - 1 ? "border-b border-gray-100 dark:border-gray-700" : ""}`}
                >
                  <BlogPostListItem
                    url={`/posts/${post.slug}`}
                    title={post.data.title}
                    datePublished={new Date(
                      post.data.pubDate,
                    ).toLocaleDateString("en-US", {
                      year: "numeric",
                      month: "short",
                      day: "numeric",
                    })}
                    description={post.data.description}
                  />
                </div>
              ))}
            </div>
          </section>
        )
      }

      {/* Projects Section */}
      {
        hasProjects && (
          <section aria-labelledby="projects-heading">
            <div class="flex items-center justify-between mb-6">
              <h2
                id="projects-heading"
                class="text-2xl font-bold text-gray-900 dark:text-white"
              >
                Projects
              </h2>
              <a
                href="/projects/"
                class="text-teal-600 hover:text-teal-800 dark:text-teal-400 dark:hover:text-teal-300 text-sm font-medium flex items-center gap-1"
              >
                All Projects <Icon name="mdi:arrow-right" class="w-4 h-4" />
              </a>
            </div>

            <div class="grid gap-6 md:grid-cols-2">
              {projects.map((project) => (
                <ProjectSummary project={project} />
              ))}
            </div>
          </section>
        )
      }
    </div>

    <div
      class="mt-12 pt-4 border-t border-gray-200 dark:border-gray-700 flex items-center"
    >
      <a
        href="/tags"
        class="inline-flex items-center gap-2 text-teal-600 hover:text-teal-800 dark:text-teal-400 dark:hover:text-teal-300 font-medium transition-colors"
      >
        <Icon name="mdi:arrow-left" class="w-4 h-4" />
        Back to all tags
      </a>
    </div>
  </div>
</BaseLayout>
